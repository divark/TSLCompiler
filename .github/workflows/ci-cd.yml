on: [push]

name: Continuous Integration / Continuous Deployment (Unix-based)

permissions:
  contents: write

jobs:
  check:
    name: Verify code behaves as intended
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Install dependencies for the project (macOS, Linux)
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            pipx install meson
            sudo apt update && sudo apt install bison flex cmake libfl-dev musl-dev musl-tools
            # This installs the latest version of clang automatically.
            # This is needed for backwards compatibility purposes.
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh 19
            echo "CXX=clang++-19" >> $GITHUB_ENV
            echo "CXXFLAGS=--sysroot=/usr/x86_64-linux-musl" >> $GITHUB_ENV
            echo "CPP_LDD=musl-ldd" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew upgrade && brew install meson bison flex
            # on macOS, bison and flex are already provided, but we want
            # to use the newer versions provided by Homebrew, so we have
            # to append them into the path via GitHub's GITHUB_PATH variable.
            echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
            echo "$(brew --prefix flex)/bin" >> $GITHUB_PATH
            # Likewise, we want to use the latest header files for flex.
            echo "LDFLAGS=-L$(brew --prefix flex)/lib" >> $GITHUB_ENV
            # And besides importing the flex headers, also make a universal binary.
            echo "CPPFLAGS=-I$(brew --prefix flex)/include -arch arm64 -arch x86_64" >> $GITHUB_ENV
            # Finally, we want to support macOS since Big Sur.
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          fi

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup build directory
        run: |
          meson wrap install fmt
          meson setup build

      - name: Run all tests
        run: meson test -C build

  upload:
    name: Upload compiled binaries
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install dependencies for the project (macOS, Linux)
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            pipx install meson
            # This installs the latest version of clang automatically.
            # This is needed for backwards compatibility purposes.
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh 19
            sudo apt update && sudo apt install libbison-dev bison flex cmake libfl-dev musl-dev musl-tools
            echo "CXX=clang++-19" >> $GITHUB_ENV
            echo "CXXFLAGS=--sysroot=/usr/x86_64-linux-musl" >> $GITHUB_ENV
            echo "CPP_LDD=musl-ldd" >> $GITHUB_ENV
            echo "LDFLAGS=-static-libstdc++" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew upgrade && brew install meson bison flex
            # on macOS, bison and flex are already provided, but we want
            # to use the newer versions provided by Homebrew, so we have
            # to append them into the path via GitHub's GITHUB_PATH variable.
            echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
            echo "$(brew --prefix flex)/bin" >> $GITHUB_PATH
            # Likewise, we want to use the latest header files for flex.
            echo "LDFLAGS=-L$(brew --prefix flex)/lib" >> $GITHUB_ENV
            # And besides importing the flex headers, also make a universal binary.
            echo "CPPFLAGS=-I$(brew --prefix flex)/include -arch arm64 -arch x86_64" >> $GITHUB_ENV
            # Finally, we want to support macOS since Big Sur.
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          fi

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup build directory
        run: |
          meson wrap install fmt
          meson setup build -Dbuild_for_release=true

      - name: Compile the project
        run: meson compile -C build

      - name: Strip unnecessary bits from the executables
        run: |
          strip build/tslchecker
          strip build/tslcompiler

      - name: Upload TSLChecker binary if this is not a release.
        uses: actions/upload-artifact@v4
        if: github.ref_type != 'tag'
        with:
          path: build/tslchecker
          name: tslchecker-${{ matrix.os }}

      - name: Upload TSLCompiler binary if this is not a release.
        uses: actions/upload-artifact@v4
        if: github.ref_type != 'tag'
        with:
          path: build/tslcompiler
          name: tslcompiler-${{ matrix.os }}

      - name: Prepare artifacts for release if it exists.
        if: github.ref_type == 'tag'
        run: |
          cp build/tslchecker tslchecker-${{ matrix.os }}
          cp build/tslcompiler tslcompiler-${{ matrix.os }}

      - name: Upload TSLChecker binary to release if it exists.
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: tslchecker-${{ matrix.os }}

      - name: Upload TSLCompiler binary to release if it exists.
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: tslcompiler-${{ matrix.os }}
